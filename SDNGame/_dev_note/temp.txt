using Silk.NET.OpenAL;

namespace SDNGame.Audio
{
    public unsafe class AudioMixer : IDisposable
    {
        private ALContext _alc;
        private AL _al;
        private Device* _device;
        private Context* _context;
        private bool _disposed;
        private readonly List<WavePlayer> _players = new();

        private float _masterVolume = 1.0f;
        public float MasterVolume
        {
            get => _masterVolume;
            set
            {
                _masterVolume = value;
                foreach (var player in _players)
                {
                    player.SetGain(_masterVolume);
                }
            }
        }

        public AudioMixer()
        {
            InitializeOpenAL();
        }

        private void InitializeOpenAL()
        {
            _alc = ALContext.GetApi();
            _al = AL.GetApi();
            _device = _alc.OpenDevice("");
            if (_device is null)
                throw new Exception("Could not open default audio device.");

            _context = _alc.CreateContext(_device, null);
            _alc.MakeContextCurrent(_context);
        }

        public WavePlayer CreateWavePlayer(string filePath, bool loop = false)
        {
            var player = new WavePlayer(filePath, _al, loop);
            _players.Add(player);
            player.SetGain(_masterVolume);
            return player;
        }

        public void RemoveWavePlayer(WavePlayer player)
        {
            if (_players.Contains(player))
            {
                _players.Remove(player);
                player.Dispose();
            }
        }

        public void Dispose()
        {
            if (_disposed)
                return;

            foreach (var player in _players)
            {
                player.Dispose();
            }

            _al.Dispose();
            _alc.DestroyContext(_context);
            _alc.CloseDevice(_device);
            _alc.Dispose();

            _disposed = true;
            GC.SuppressFinalize(this);
        }
    }
}

using Silk.NET.OpenAL;
using System.Buffers.Binary;
using System.Text;

namespace SDNGame.Audio
{
    public unsafe class WavePlayer : IDisposable
    {
        private short _numChannels;
        private int _sampleRate;
        private int _byteRate;
        private short _blockAlign;
        private short _bitsPerSample;
        private BufferFormat _format;
        private byte[] _audioData;

        private readonly AL _al;
        private uint _source;
        private uint _buffer;
        private bool _disposed;

        public bool Loop { get; set; } = false;

        public WavePlayer(string filePath, AL al, bool loop = false)
        {
            _al = al;
            Loop = loop;
            LoadWav(filePath);
            InitializeSource();
        }

        private void LoadWav(string filePath)
        {
            byte[] file = File.ReadAllBytes(filePath);
            ReadOnlySpan<byte> span = file.AsSpan();
            int index = 0;

            if (span[index++] != 'R' || span[index++] != 'I' || span[index++] != 'F' || span[index++] != 'F')
                throw new FormatException("File is not in RIFF format.");

            index += 4;

            if (span[index++] != 'W' || span[index++] != 'A' || span[index++] != 'V' || span[index++] != 'E')
                throw new FormatException("File is not in WAVE format.");

            bool fmtFound = false;
            bool dataFound = false;
            while (index + 8 <= span.Length)
            {
                string identifier = Encoding.ASCII.GetString(span.Slice(index, 4));
                index += 4;
                int size = BinaryPrimitives.ReadInt32LittleEndian(span.Slice(index, 4));
                index += 4;

                if (identifier == "fmt ")
                {
                    if (size < 16)
                        throw new FormatException($"Unexpected fmt chunk size {size}.");

                    short audioFormat = BinaryPrimitives.ReadInt16LittleEndian(span.Slice(index, 2));
                    index += 2;
                    if (audioFormat != 1)
                        throw new NotSupportedException($"Audio format {audioFormat} is not supported (only PCM is supported).");

                    _numChannels = BinaryPrimitives.ReadInt16LittleEndian(span.Slice(index, 2));
                    index += 2;
                    _sampleRate = BinaryPrimitives.ReadInt32LittleEndian(span.Slice(index, 4));
                    index += 4;
                    _byteRate = BinaryPrimitives.ReadInt32LittleEndian(span.Slice(index, 4));
                    index += 4;
                    _blockAlign = BinaryPrimitives.ReadInt16LittleEndian(span.Slice(index, 2));
                    index += 2;
                    _bitsPerSample = BinaryPrimitives.ReadInt16LittleEndian(span.Slice(index, 2));
                    index += 2;

                    if (_numChannels == 1)
                    {
                        _format = _bitsPerSample == 8 ? BufferFormat.Mono8 :
                                  _bitsPerSample == 16 ? BufferFormat.Mono16 :
                                  throw new NotSupportedException($"Mono audio with {_bitsPerSample} bits per sample is not supported.");
                    }
                    else if (_numChannels == 2)
                    {
                        _format = _bitsPerSample == 8 ? BufferFormat.Stereo8 :
                                  _bitsPerSample == 16 ? BufferFormat.Stereo16 :
                                  throw new NotSupportedException($"Stereo audio with {_bitsPerSample} bits per sample is not supported.");
                    }
                    else
                        throw new NotSupportedException($"Audio with {_numChannels} channels is not supported.");

                    fmtFound = true;
                    if (size > 16)
                        index += size - 16;
                }
                else if (identifier == "data")
                {
                    _audioData = span.Slice(index, size).ToArray();
                    index += size;
                    dataFound = true;
                }
                else
                {
                    index += size;
                }
            }

            if (!fmtFound)
                throw new FormatException("Missing fmt chunk in WAV file.");
            if (!dataFound)
                throw new FormatException("Missing data chunk in WAV file.");

            Console.WriteLine($"Loaded WAV: {_numChannels} channel(s), {_sampleRate} Hz, {_bitsPerSample} bits per sample, {_audioData.Length} bytes.");
        }

        private void InitializeSource()
        {
            _source = _al.GenSource();
            _buffer = _al.GenBuffer();

            _al.SetSourceProperty(_source, SourceBoolean.Looping, Loop);

            fixed (byte* pData = _audioData)
            {
                _al.BufferData(_buffer, _format, pData, _audioData.Length, _sampleRate);
            }

            _al.SetSourceProperty(_source, SourceInteger.Buffer, _buffer);
        }

        public void Play()
        {
            _al.SourcePlay(_source);
        }

        public void Pause()
        {
            _al.SourcePause(_source);
        }

        public void Stop()
        {
            _al.SourceStop(_source);
        }

        public void SetGain(float gain)
        {
            _al.SetSourceProperty(_source, SourceFloat.Gain, gain);
        }

        public void Dispose()
        {
            if (_disposed)
                return;

            Stop();
            _al.DeleteSource(_source);
            _al.DeleteBuffer(_buffer);
            _disposed = true;
            GC.SuppressFinalize(this);
        }
    }
}



using Silk.NET.Maths;
using Silk.NET.OpenGL;
using Silk.NET.Windowing;
namespace BloomTest
{
public class Program
{
private static IWindow window;
private static GL gl;
private static uint triangleVAO;
private static uint triangleVBO;
private static uint framebuffer;
private static uint[] colorBuffers;
private static uint quadVAO;
private static uint quadVBO;
private static uint shaderProgram;
private static uint blurShader;
// Shader sources
private static string vertexShaderSource = @"
#version 330 core
layout (location = 0) in vec2 aPosition;
out vec2 TexCoords;
void main()
{
gl_Position = vec4(aPosition, 0.0, 1.0);
TexCoords = (aPosition + 1.0) * 0.5;
}";
private static string fragmentShaderSource = @"
#version 330 core
out vec4 FragColor;
void main()
{
FragColor = vec4(1.0, 0.0, 0.0, 1.0); // Red triangle
}";
private static string blurFragmentShaderSource = @"
#version 330 core
in vec2 TexCoords;
out vec4 FragColor;
uniform sampler2D screenTexture;
uniform bool horizontal;
uniform float weight[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);
void main()
{
vec2 tex_offset = 1.0 / textureSize(screenTexture, 0);
vec3 result = texture(screenTexture, TexCoords).rgb * weight[0];
if(horizontal)
{
for(int i = 1; i < 5; ++i)
{
result += texture(screenTexture, TexCoords + vec2(tex_offset.x * i, 0.0)).rgb * weight[i];
result += texture(screenTexture, TexCoords - vec2(tex_offset.x * i, 0.0)).rgb * weight[i];
}
}
else
{
for(int i = 1; i < 5; ++i)
{
result += texture(screenTexture, TexCoords + vec2(0.0, tex_offset.y * i)).rgb * weight[i];
result += texture(screenTexture, TexCoords - vec2(0.0, tex_offset.y * i)).rgb * weight[i];
}
}
FragColor = vec4(result, 1.0);
}";
public static void Main()
{
var options = WindowOptions.Default;
options.Size = new Vector2D<int>(800, 600);
options.Title = "Gaussian Blur Example";
window = Window.Create(options);
window.Load += OnLoad;
window.Render += OnRender;
window.Run();
}
private static unsafe void OnLoad()
{
gl = GL.GetApi(window);
// Create shaders
shaderProgram = CreateShaderProgram(vertexShaderSource, fragmentShaderSource);
blurShader = CreateShaderProgram(vertexShaderSource, blurFragmentShaderSource);
// Set up triangle vertices
float[] triangleVertices =
{
-0.5f, -0.5f,
0.5f, -0.5f,
0.0f, 0.5f
};
triangleVAO = gl.GenVertexArray();
triangleVBO = gl.GenBuffer();
gl.BindVertexArray(triangleVAO);
gl.BindBuffer(BufferTargetARB.ArrayBuffer, triangleVBO);
fixed (void* v = &triangleVertices[0])
gl.BufferData(BufferTargetARB.ArrayBuffer, (nuint)(triangleVertices.Length * sizeof(float)), v, BufferUsageARB.StaticDraw);
gl.VertexAttribPointer(0, 2, VertexAttribPointerType.Float, false, 2 * sizeof(float), null);
gl.EnableVertexAttribArray(0);
// Set up framebuffers for blur
SetupBlurFramebuffers();
// Set up screen quad for post-processing
SetupScreenQuad();
}
private static unsafe void SetupBlurFramebuffers()
{
framebuffer = gl.GenFramebuffer();
colorBuffers = new uint[2];
gl.GenTextures(2, colorBuffers);
for (int i = 0; i < 2; i++)
{
gl.BindTexture(TextureTarget.Texture2D, colorBuffers[i]);
gl.TexImage2D(TextureTarget.Texture2D, 0, InternalFormat.Rgb16f, 800, 600, 0, PixelFormat.Rgb, PixelType.Float, null);
gl.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMinFilter, (int)GLEnum.Linear);
gl.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMagFilter, (int)GLEnum.Linear);
gl.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureWrapS, (int)GLEnum.ClampToEdge);
gl.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureWrapT, (int)GLEnum.ClampToEdge);
}
}
private static unsafe void SetupScreenQuad()
{
float[] quadVertices =
{
-1.0f, 1.0f,
-1.0f, -1.0f,
1.0f, -1.0f,
-1.0f, 1.0f,
1.0f, -1.0f,
1.0f, 1.0f
};
quadVAO = gl.GenVertexArray();
quadVBO = gl.GenBuffer();
gl.BindVertexArray(quadVAO);
gl.BindBuffer(BufferTargetARB.ArrayBuffer, quadVBO);
fixed (void* v = &quadVertices[0])
gl.BufferData(BufferTargetARB.ArrayBuffer, (nuint)(quadVertices.Length * sizeof(float)), v, BufferUsageARB.StaticDraw);
gl.VertexAttribPointer(0, 2, VertexAttribPointerType.Float, false, 2 * sizeof(float), null);
gl.EnableVertexAttribArray(0);
}
private static void OnRender(double obj)
{
// 1. First render pass - render triangle to framebuffer
gl.BindFramebuffer(FramebufferTarget.Framebuffer, framebuffer);
gl.FramebufferTexture2D(FramebufferTarget.Framebuffer, FramebufferAttachment.ColorAttachment0, TextureTarget.Texture2D, colorBuffers[0], 0);
gl.Clear(ClearBufferMask.ColorBufferBit);
gl.UseProgram(shaderProgram);
gl.BindVertexArray(triangleVAO);
gl.DrawArrays(PrimitiveType.Triangles, 0, 3);
// 2. Blur pass - ping-pong between framebuffers
gl.UseProgram(blurShader);
bool horizontal = true;
bool firstIteration = true;
int amount = 100; // Number of blur passes
for (int i = 0; i < amount; i++)
{
gl.BindFramebuffer(FramebufferTarget.Framebuffer, framebuffer);
gl.FramebufferTexture2D(FramebufferTarget.Framebuffer, FramebufferAttachment.ColorAttachment0,
TextureTarget.Texture2D, colorBuffers[horizontal ? 1 : 0], 0);
gl.Uniform1(gl.GetUniformLocation(blurShader, "horizontal"), horizontal ? 1 : 0);
gl.BindTexture(TextureTarget.Texture2D, firstIteration ? colorBuffers[0] : colorBuffers[horizontal ? 0 : 1]);
gl.BindVertexArray(quadVAO);
gl.DrawArrays(PrimitiveType.Triangles, 0, 6);
horizontal = !horizontal;
if (firstIteration)
firstIteration = false;
}
// 3. Final render to screen
gl.BindFramebuffer(FramebufferTarget.Framebuffer, 0);
gl.Clear(ClearBufferMask.ColorBufferBit);
gl.UseProgram(blurShader);
gl.BindTexture(TextureTarget.Texture2D, colorBuffers[!horizontal ? 1 : 0]);
gl.BindVertexArray(quadVAO);
gl.DrawArrays(PrimitiveType.Triangles, 0, 6);
}
private static uint CreateShaderProgram(string vertexSource, string fragmentSource)
{
uint vertexShader = gl.CreateShader(ShaderType.VertexShader);
gl.ShaderSource(vertexShader, vertexSource);
gl.CompileShader(vertexShader);
uint fragmentShader = gl.CreateShader(ShaderType.FragmentShader);
gl.ShaderSource(fragmentShader, fragmentSource);
gl.CompileShader(fragmentShader);
uint program = gl.CreateProgram();
gl.AttachShader(program, vertexShader);
gl.AttachShader(program, fragmentShader);
gl.LinkProgram(program);
gl.DeleteShader(vertexShader);
gl.DeleteShader(fragmentShader);
return program;
}
}
}